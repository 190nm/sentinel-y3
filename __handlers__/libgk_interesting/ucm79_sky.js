/*
 * Auto-generated by Frida. Please modify to match the signature of ucm79$sky.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call ucm79$sky.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log('ucm79$sky()');
    console.log('[-]onEnter: [tksi_cbc_tbl] (probably an aes-cbc-256 table)');
    console.log(hexdump(args[0], {length: 280, header: true})); //280 probably
    console.log('--->[IV]');
    console.log(hexdump(args[1], {length: 16, header: true}));
    console.log('--->[_Input]');
    console.log(hexdump(args[2], {length: 128, header: true}));
    console.log('--->[_Output]');
    console.log(hexdump(args[3], {length: 128, header: true}));
    console.log('--->[_Length]');
    console.log(args[4].toInt32());
    console.log('--->[_H1]');
    console.log(args[5].toInt32());
    console.log('--->[_H2]');
    console.log(args[6].toInt32());
  },

  /**
   * Called synchronously when about to return from ucm79$sky.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
  }
}
